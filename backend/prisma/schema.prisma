generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  auth0_id            String                @unique
  email               String
  username            String                @db.VarChar(255)
  avatar              String
  active              Boolean               @default(true) // bajas logicas
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  wallet              Wallet?
  player              Player?
  // country_id      Int
  // country      Country?
  VerificationRequest VerificationRequest[]
}

model Rank {
  id                  Int                   @id @default(autoincrement())
  description         String                @unique
  VerificationRequest VerificationRequest[]
  Player              Player[]
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model VerificationRequest {
  id        Int           @id @default(autoincrement())
  user_id   Int
  user      User          @relation(fields: [user_id], references: [id])
  game_id   Int
  game      Game          @relation(fields: [game_id], references: [id])
  status    RequestStatus @default(PENDING)
  rank_id   Int
  rank      Rank          @relation(fields: [rank_id], references: [id])
  filepath  String
  createdAt DateTime      @default(now())
}

model Wallet {
  id                      Int                       @id @default(autoincrement())
  user_id                 Int                       @unique
  user                    User                      @relation(fields: [user_id], references: [id])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  access_token            String?
  public_key              String?
  transactions            Transaction[]
  token_wallet            Token_wallet[]
  marketplace_publication Marketplace_publication[]
  in_wallet               In_wallet[]
}

model Transaction {
  id        Int             @id @default(autoincrement())
  wallet_id Int
  wallet    Wallet          @relation(fields: [wallet_id], references: [id])
  token_id  Int
  type      TransactionType
  timestamp DateTime        @default(now())
}

enum TransactionType {
  BUY
  SELL
}

model Game {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  icon                String                @default("")
  player              Player[]
  event               Event[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  VerificationRequest VerificationRequest[]
}

model Player {
  id           Int            @id @default(autoincrement())
  user_id      Int            @unique
  user         User           @relation(fields: [user_id], references: [id])
  biography    String
  rank_id      Int
  rank         Rank           @relation(fields: [rank_id], references: [id])
  game_id      Int
  game         Game           @relation(fields: [game_id], references: [id])
  active       Boolean        @default(true)
  fundraisings Fundraising[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  access_token String?
  public_key   String?
  player_event Player_event[]
}

model Player_event {
  player_id Int
  event_id  Int
  position  Int    @default(0)
  player    Player @relation(fields: [player_id], references: [id])
  event     Event  @relation(fields: [event_id], references: [id])

  @@id([player_id, event_id])
}

model Event {
  id           Int            @id @default(autoincrement())
  start_date   DateTime
  end_date     DateTime
  max_players  Int
  prize        Float
  name         String
  game_id      Int
  game         Game           @relation(fields: [game_id], references: [id])
  fundraisings Fundraising[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  active       Boolean        @default(true)
  player_event Player_event[]
  checked      Boolean        @default(false)
}

model Fundraising {
  id               Int         @id @default(autoincrement())
  goal_amount      Float
  current_amount   Float       @default(0)
  prize_percentage Float
  risk_level       RiskLevel   @default(LOW)
  active           Boolean     @default(true)
  player_id        Int
  player           Player?     @relation(fields: [player_id], references: [id])
  event_id         Int
  event            Event?      @relation(fields: [event_id], references: [id])
  collection       Collection?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model Collection {
  id                              Int         @id @default(autoincrement())
  token_prize_percentage          Float
  previous_token_prize_percentage Float
  amount_left                     Int
  current_price                   Float
  initial_amount                  Int
  previous_price                  Float
  fundraising_id                  Int         @unique
  fundraising                     Fundraising @relation(fields: [fundraising_id], references: [id])
  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
  token                           Token[]
}

model Token {
  id                      Int                       @id @default(autoincrement())
  price                   Float
  collection_id           Int
  collection              Collection                @relation(fields: [collection_id], references: [id])
  token_wallet            Token_wallet[]
  Marketplace_publication Marketplace_publication[]
}

model Token_wallet {
  token_id  Int
  wallet_id Int
  wallet    Wallet @relation(fields: [wallet_id], references: [id])
  token     Token  @relation(fields: [token_id], references: [id])

  @@id([wallet_id, token_id])
}

model Marketplace_publication {
  publication_id Int        @id @default(autoincrement())
  active         Boolean    @default(true)
  price          Float
  date           DateTime   @default(now())
  token_id       Int
  token          Token      @relation(fields: [token_id], references: [id])
  out_wallet_id  Int
  out_wallet     Wallet     @relation(fields: [out_wallet_id], references: [id])
  In_wallet      In_wallet?
  // publication_token Publication_token[]
}

model In_wallet {
  publication_id Int @unique
  wallet_id      Int //No necesita ser ID, es uno por publicacion de marketplace (N,0)

  marketplace_publication Marketplace_publication @relation(fields: [publication_id], references: [publication_id])
  wallet                  Wallet                  @relation(fields: [wallet_id], references: [id])

  // Agregué que la clave sea compuesta. Solo debería ser uno por publicacicón y por billetera. No debería existir
  // una publicación que venda a dos billeteras distintas 
  @@id([wallet_id, publication_id])
}

// model Publication_token {
//   publication_id          Int                     @id
//   token_id                Int //No necesita ser ID, es uno por publicacion de marketplace (N,0)
//   marketplace_publication Marketplace_publication @relation(fields: [publication_id], references: [publication_id])
//   token                   Token                   @relation(fields: [token_id], references: [id])
// }
