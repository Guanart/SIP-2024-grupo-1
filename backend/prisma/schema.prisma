generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  auth0_id  String   @unique
  email     String
  username  String   @db.VarChar(255)
  avatar    String
  active    Boolean  @default(true) // bajas logicas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallet    Wallet?
  player    Player?
  // country_id      Int
  // country      Country?
}

model Wallet {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique
  user      User     @relation(fields: [user_id], references: [id])
  cbu       String   @unique
  paypal_id String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        Int      @id @default(autoincrement())
  wallet_id Int
  token_id  Int
  type_id   Int
  timestamp DateTime
}

model Game {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  icon      String   @default("")
  player    Player[]
  event     Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id           Int           @id @default(autoincrement())
  user_id      Int           @unique
  user         User          @relation(fields: [user_id], references: [id])
  biography    String
  ranking      Int
  game_id      Int
  game         Game          @relation(fields: [game_id], references: [id])
  active       Boolean       @default(true)
  fundraisings Fundraising[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Event {
  id           Int           @id @default(autoincrement())
  start_date   DateTime
  end_date     DateTime
  max_players  Int
  prize        Float
  name         String
  game_id      Int
  game         Game          @relation(fields: [game_id], references: [id])
  fundraisings Fundraising[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  active       Boolean       @default(true)
}

model Fundraising {
  id               Int         @id @default(autoincrement())
  goal_amount      Float
  current_amount   Float       @default(0)
  prize_percentage Float
  risk_level       RiskLevel   @default(LOW)
  active           Boolean     @default(true)
  player_id        Int
  player           Player?     @relation(fields: [player_id], references: [id])
  event_id         Int
  event            Event?      @relation(fields: [event_id], references: [id])
  collection       Collection?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model Collection {
  id                     Int         @id @default(autoincrement())
  token_price_percentage Float
  amount_left            Int
  current_price          Float
  initial_amount         Int
  initial_price          Float
  fundraising_id         Int         @unique
  fundraising            Fundraising @relation(fields: [fundraising_id], references: [id])
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  Token                  Token[]
}

model Token {
  id            Int        @id @default(autoincrement())
  price         Float
  collection_id Int
  collection    Collection @relation(fields: [collection_id], references: [id])
}
