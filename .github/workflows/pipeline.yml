name: LOT pipeline
on:
    push:
        branches: ['main']
jobs:
    build-images:
        name: Build and Push Docker Images
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Run vulnerability check on backend
              working-directory: backend
              run: |
                  bash check-dependencies.sh

            - name: Run vulnerability check on frontend
              working-directory: frontend
              run: |
                  npm install
                  bash check-dependencies.sh

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            - name: Build backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  push: false
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0

            - name: Scan backend image
              uses: anchore/scan-action@v3
              with:
                  image: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0
                  fail-build: true
                  severity-cutoff: critical

            - name: Build frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  push: false
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:1.0.0

            - name: Scan frontend image
              uses: anchore/scan-action@v3
              with:
                  image: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:1.0.0
                  fail-build: true
                  severity-cutoff: critical

            - name: Run backend unit tests
              working-directory: backend
              run: |
                  npm install
                  npm run test

            - name: Run Accounts API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/accounts.json
                  environment: postman/environment.json

            - name: Run Fundraisings API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/fundraisings.json
                  environment: postman/environment.json

            - name: Run Marketplace API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/marketplace.json
                  environment: postman/environment.json

            - name: Run Selenium integration tests
              working-directory: selenium
              run: |
                  pip install -r requirements.txt
                  bash run-tests.sh

            - name: Push frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:1.0.0

            - name: Push backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0

    configure-backend:
        name: Configure backend for terraform state
        if: startsWith(github.event.head_commit.message, '(up)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: Check and Create GCS Bucket
              env:
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
                  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
              run: |
                  gcloud config set project $PROJECT_ID

                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                  gcloud auth activate-service-account --key-file=credentials.json
                  gcloud config set pass_credentials_to_gsutil true

                  # Check if the bucket exists
                  BUCKET_URI="gs://${BUCKET_NAME}/"
                  if gsutil ls -p $PROJECT_ID | grep $BUCKET_URI; then
                    echo "Bucket $BUCKET_NAME already exists."
                  else
                    echo "Creating bucket $BUCKET_NAME..."
                    gsutil mb -p $PROJECT_ID $BUCKET_URI
                  fi

    infra-up:
        name: Build Kubernetes infrastructure
        needs: configure-backend
        if: startsWith(github.event.head_commit.message, '(up)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

            # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=terraform/state"

                  terraform validate

                  terraform plan -lock=false

                  terraform apply -lock=false --auto-approve

    install-argo:
        name: Install Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: infra-up
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-east1-b"
                  gcloud container clusters get-credentials lot --region=${REGION}

            - name: Check if Argo CD namespace exists
              id: check_namespace
              run: |
                  if kubectl get namespace argocd; then
                    echo "Namespace argocd already exists."
                    echo "::set-output name=exists::true"
                  else
                    echo "Namespace argocd does not exist."
                    echo "::set-output name=exists::false"
                  fi

            - name: Create Argo CD namespace
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl create namespace argocd
                  kubectl create namespace services

            - name: Install Argo CD
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    configure-argo:
        name: Configure Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: install-argo
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-east1-b"
                  gcloud container clusters get-credentials lot --region=${REGION}

            - name: Install Argo CD CLI
              run: |
                  curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                  chmod +x /usr/local/bin/argocd

            - name: Start port forwarding
              shell: bash
              run: |
                  kubectl wait --for=condition=available --timeout=120s deploy/argocd-server -n argocd
                  kubectl port-forward svc/argocd-server -n argocd 8080:443 &
                  sleep 10  # Gives additional time for the port forwarding to establish

            - name: Retrieve Argo CD API server password
              run: |
                  ARGOCD_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                  echo "ARGOCD_PWD=$ARGOCD_PWD" >> $GITHUB_ENV

            - name: Login to Argo CD
              run: echo y | argocd login localhost:8080 --username admin --password $ARGOCD_PWD --insecure
              env:
                  ARGOCD_PWD: ${{ env.ARGOCD_PWD }}

            - name: Install cloud-native operator
              run: |
                  kubectl apply --server-side -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
                  sleep 75

            - name: Create secret with GCP credentials
              working-directory: kubernetes
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                  kubectl create secret generic gcp-credentials -n argocd --from-file=credentials.json

            - name: Create infra services
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f services-project.yml
                  kubectl apply -f services.yml
                  sleep 145

            # Crear un nuevo ConfigMap con las credenciales de conexión Postgres
            - name: Create Postgres config
              working-directory: kubernetes
              run: |
                  POSTGRES_PASSWORD=$(kubectl get secret postgres-cluster-superuser -o jsonpath="{.data.password}" -n argocd | base64 --decode)
                  POSTGRES_USERNAME=$(kubectl get secret postgres-cluster-superuser -o jsonpath="{.data.username}" -n argocd | base64 --decode)

                  cat <<EOF | kubectl apply -f -
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: postgres-config
                    namespace: argocd
                  data:
                    DATABASE_URL: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres-cluster-rw:5432/LOT
                  EOF

            - name: Create applications
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f applications-project.yml
                  kubectl apply -f applications.yml

    infra-destroy:
        name: Destroy Kubernetes infrastructure
        if: startsWith(github.event.head_commit.message, '(down)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

              # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

              # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=terraform/state"

                  terraform destroy -lock=false --auto-approve
