name: LOT pipeline
on:
    push:
        branches: ['main']
jobs:
    configure-backend:
        name: Configure backend for terraform state
        if: startsWith(github.event.head_commit.message, '(up)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: Check and Create GCS Bucket for Terraform state
              env:
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
                  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
              run: |
                  gcloud config set project $PROJECT_ID

                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                  gcloud auth activate-service-account --key-file=credentials.json
                  gcloud config set pass_credentials_to_gsutil true

                  # Check if the bucket exists
                  BUCKET_URI="gs://${BUCKET_NAME}/"
                  if gsutil ls -p $PROJECT_ID | grep $BUCKET_URI; then
                    echo "Bucket $BUCKET_NAME already exists."
                  else
                    echo "Creating bucket $BUCKET_NAME..."
                    gsutil mb -p $PROJECT_ID $BUCKET_URI
                  fi

            - name: Check and Create GCS Bucket for Postgres backups
              env:
                  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
              run: |
                  gcloud config set project $PROJECT_ID

                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                  gcloud auth activate-service-account --key-file=credentials.json
                  gcloud config set pass_credentials_to_gsutil true

                  BUCKET_URI="gs://lot-pg-backups/"

                  # Check if the bucket exists
                  if gsutil ls -p $PROJECT_ID | grep $BUCKET_URI; then
                    echo "Bucket lot-pg-backups already exists."
                  else
                    echo "Creating bucket lot-pg-backups..."
                    gsutil mb -p $PROJECT_ID $BUCKET_URI
                  fi

    infra-up:
        name: Build Kubernetes infrastructure
        needs: configure-backend
        if: startsWith(github.event.head_commit.message, '(up)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

            # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=terraform/state"

                  terraform validate

                  terraform plan -lock=false

                  terraform apply -lock=false --auto-approve

    install-argo:
        name: Install Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: infra-up
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-east1-b"
                  gcloud container clusters get-credentials lot --region=${REGION}

            - name: Check if Argo CD namespace exists
              id: check_namespace
              run: |
                  if kubectl get namespace argocd; then
                    echo "Namespace argocd already exists."
                    echo "::set-output name=exists::true"
                  else
                    echo "Namespace argocd does not exist."
                    echo "::set-output name=exists::false"
                  fi

            - name: Create Argo CD namespace
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl create namespace argocd
                  kubectl create namespace services

            - name: Install Argo CD
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    configure-argo:
        name: Configure Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: install-argo
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-east1-b"
                  gcloud container clusters get-credentials lot --region=${REGION}

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            - name: Run vulnerability check on backend
              working-directory: backend
              run: |
                  bash check-dependencies.sh

            - name: Run backend unit tests
              working-directory: backend
              run: |
                  npm install
                  npm run test

            - name: Build backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  push: false
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0

            - name: Scan backend image
              uses: anchore/scan-action@v3
              with:
                  image: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0
                  fail-build: true
                  severity-cutoff: critical

            - name: Push backend image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-backend:1.0.0

            - name: Create secret with GCP credentials
              run: |
                  if ! kubectl get secret gcp-credentials -n argocd > /dev/null 2>&1; then
                    echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                    kubectl create secret generic gcp-credentials -n argocd --from-file=credentials.json
                    rm credentials.json
                  fi

            - name: Install Argo CD CLI
              run: |
                  curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                  chmod +x /usr/local/bin/argocd

            - name: Start port forwarding
              shell: bash
              run: |
                  kubectl wait --for=condition=available --timeout=120s deploy/argocd-server -n argocd
                  kubectl port-forward svc/argocd-server -n argocd 8080:443 &
                  sleep 10  # Gives additional time for the port forwarding to establish

            - name: Retrieve Argo CD API server password
              run: |
                  ARGOCD_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                  echo "ARGOCD_PWD=$ARGOCD_PWD" >> $GITHUB_ENV

            - name: Login to Argo CD
              run: echo y | argocd login localhost:8080 --username admin --password $ARGOCD_PWD --insecure
              env:
                  ARGOCD_PWD: ${{ env.ARGOCD_PWD }}

            - name: Install cloud-native operator
              run: |
                  if ! kubectl get deployment -n cnpg-system cnpg-controller-manager > /dev/null 2>&1; then
                    kubectl apply --server-side -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
                  else
                    echo "Cloud-native operator already installed."
                  fi

            - name: Wait for cloud-native operator to be running
              run: |
                  echo "Waiting for cloud-native operator to be running..."
                  while true; do
                    READY_REPLICAS=$(kubectl get deployment cnpg-controller-manager -n cnpg-system -o jsonpath='{.status.readyReplicas}')
                    if [[ "$READY_REPLICAS" -ge 1 ]]; then
                      echo "Cloud-native operator is running."
                      break
                    else
                      echo "Cloud-native operator is not ready yet. Waiting for 10 seconds..."
                      sleep 10
                    fi
                  done

            - name: Create infra services
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f services-project.yml
                  kubectl apply -f services.yml

            - name: Wait for PostgreSQL to be running
              run: |
                  echo "Waiting for PostgreSQL to be running..."
                  while [ -z "$POSTGRES_READY" ]; do
                    RUNNING_COUNT=$(kubectl get pods -n argocd -l cnpg.io/cluster=postgres-cluster --field-selector=status.phase=Running --no-headers | wc -l)
                    TOTAL_COUNT=$(kubectl get pods -n argocd -l cnpg.io/cluster=postgres-cluster --no-headers | wc -l)
                    
                    if [ "$RUNNING_COUNT" -eq "$TOTAL_COUNT" ]; then
                      POSTGRES_READY=true
                    else
                      echo "PostgreSQL is not ready yet. Waiting for 10 seconds..."
                      sleep 10
                    fi
                  done

            # Crear un nuevo ConfigMap con las credenciales de conexión Postgres
            - name: Create Postgres config
              run: |
                  POSTGRES_PASSWORD=$(kubectl get secret postgres-cluster-superuser -o jsonpath="{.data.password}" -n argocd | base64 --decode)
                  POSTGRES_USERNAME=$(kubectl get secret postgres-cluster-superuser -o jsonpath="{.data.username}" -n argocd | base64 --decode)

                  cat <<EOF | kubectl apply -f -
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: postgres-config
                    namespace: argocd
                  data:
                    DATABASE_URL: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres-cluster-rw:5432/LOT
                  EOF

            - name: Deploy backend
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f backend-project.yml
                  kubectl apply -f backend.yml

            - name: Wait for backend service to be ready
              run: |
                  while [[ -z "$(kubectl get svc backend-service -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]]; do
                    echo "Waiting for backend-service to be ready..."
                    sleep 10
                  done

            - name: Load database seed
              run: |
                  BACKEND_SERVICE=$(kubectl get svc backend-service -n argocd -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
                  curl http://$BACKEND_SERVICE:3000/seed

            - name: Update Postman environments
              run: |
                  BACKEND_SERVICE=$(kubectl get svc backend-service -n argocd -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
                  jq --arg new_url "http://$BACKEND_SERVICE:3000" '.values[] | select(.key == "base_url") | .value = $new_url' postman/environment.json > postman/environment_temp.json
                  jq '.values |= map(if .key == "base_url" then .value = "http://'$BACKEND_SERVICE':3000" else . end)' postman/environment.json > postman/environment_temp.json
                  mv postman/environment_temp.json postman/environment.json

            - name: Run Accounts API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/accounts.json
                  environment: postman/environment.json

            - name: Run Fundraisings API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/fundraisings.json
                  environment: postman/environment.json

            - name: Run Marketplace API test
              uses: matt-ball/newman-action@master
              with:
                  collection: postman/marketplace.json
                  environment: postman/environment.json

            - name: Run vulnerability check on frontend
              working-directory: frontend
              run: |
                  npm install
                  bash check-dependencies.sh

            - name: Build frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  push: false
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:1.0.0

            - name: Scan frontend image
              uses: anchore/scan-action@v3
              with:
                  image: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:1.0.0
                  fail-build: true
                  severity-cutoff: critical

            # setear secret "AUTH0_AUDIENCE=http://my-secure-api.com"
            - name: Generate .env.prod
              env:
                  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
                  CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
                  CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
                  SPA_CLIENT_ID: ${{ secrets.AUTH0_SPA_CLIENT_ID }}
              run: |
                  # Obtener el servicio backend
                  BACKEND_SERVICE=$(kubectl get svc backend-service -n argocd -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')

                  # Verificar si backend-service está vacío
                  if [ -z "$BACKEND_SERVICE" ]; then
                    echo "Error: backend-service is empty"
                    exit 1
                  fi

                  AUDIENCE=http://my-secure-api.com
                  # Escribir las variables de entorno en .env.prod
                  echo "APP_BACKEND_HOST=$BACKEND_SERVICE" > frontend/.env.prod
                  echo "APP_BACKEND_PORT=3000" >> frontend/.env.prod
                  echo "APP_AUTH0_AUDIENCE=$AUDIENCE" >> frontend/.env.prod
                  echo "APP_AUTH0_CLIENT_ID=$SPA_CLIENT_ID" >> frontend/.env.prod
                  echo "APP_AUTH0_DOMAIN=$AUTH0_DOMAIN" >> frontend/.env.prod

            - name: Push frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lot-frontend:latest

            - name: Deploy frontend
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f frontend-project.yml
                  kubectl apply -f frontend.yml

            - name: Wait for frontend service to be ready
              run: |
                  while [[ -z "$(kubectl get svc frontend-service -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]]; do
                    echo "Waiting for frontend-service to be ready..."
                    sleep 10
                  done

            - name: Update Auth0 callbacks
              env:
                  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
                  CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
                  CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
                  SPA_CLIENT_ID: ${{ secrets.AUTH0_SPA_CLIENT_ID }}
              run: |
                  # Obtener el token de acceso de Auth0
                  RESPONSE=$(curl --silent --request POST \
                                  --url "https://$AUTH0_DOMAIN/oauth/token" \
                                  --header 'content-type: application/json' \
                                  --data "{\"client_id\":\"$CLIENT_ID\",\"client_secret\":\"$CLIENT_SECRET\",\"audience\":\"https://$AUTH0_DOMAIN/api/v2/\",\"grant_type\":\"client_credentials\"}")

                  # Verificar errores en la solicitud cURL
                  if [ $? -ne 0 ]; then
                    echo "Failed to obtain Access Token."
                    exit 1
                  fi

                  # Extraer Access Token de la respuesta JSON
                  ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

                  # Verificar si Access Token está vacío
                  if [ -z "$ACCESS_TOKEN" ]; then
                    echo "Failed to extract Access Token from the response."
                    exit 1
                  fi

                  PUBLIC_IP=$(kubectl get svc frontend-service -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

                  # Actualizar la URL de retorno con la IP pública y el puerto correcto
                  NEW_CALLBACK_URL="http://$PUBLIC_IP:5173"

                  # Actualizar la configuración del cliente SPA en Auth0
                  curl --request PATCH \
                    --url "https://$AUTH0_DOMAIN/api/v2/clients/$SPA_CLIENT_ID" \
                    --header "authorization: Bearer $ACCESS_TOKEN" \
                    --header 'content-type: application/json' \
                    --data '{
                      "callbacks": ["http://localhost:5173", "http://127.0.0.1:5173", "'"$NEW_CALLBACK_URL"'"],
                      "allowed_logout_urls": ["http://localhost:5173", "http://127.0.0.1:5173", "'"$NEW_CALLBACK_URL"'"],
                      "web_origins": ["http://localhost:5173", "http://127.0.0.1:5173", "'"$NEW_CALLBACK_URL"'"]
                    }' \
                    > /dev/null 2>&1

    run-integration-tests:
        name: Run integration tests
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: configure-argo
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-east1-b"
                  gcloud container clusters get-credentials lot --region=${REGION}

            - name: Get frontend LoadBalancer IP
              id: get-frontend-ip
              run: |
                  FRONTEND_IP=$(kubectl get svc frontend-service -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                  echo "::set-output name=frontend-ip::$FRONTEND_IP"

            - name: Run Selenium integration tests
              working-directory: selenium
              run: |
                  FRONTEND_IP=${{ steps.get-frontend-ip.outputs.frontend-ip }}
                  bash run-tests.sh $FRONTEND_IP

    infra-destroy:
        name: Destroy Kubernetes infrastructure
        if: startsWith(github.event.head_commit.message, '(down)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

              # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

              # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=terraform/state"

                  terraform destroy -lock=false --auto-approve
